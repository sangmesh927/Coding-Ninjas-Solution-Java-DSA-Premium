import java.util.*;

public class Solution {
    // Define the possible directions to move in the grid
    private int[] dx = {-1, -1, -1, 0, 0, 1, 1, 1};
    private int[] dy = {-1, 0, 1, -1, 1, -1, 0, 1};
    // Define the target string to search for
    private String target = "CODINGNINJA";

    // Method to check if a cell is safe to visit
    private boolean isSafe(int x, int y, int N, int M, boolean[][] visited) {
        // A cell is safe if it is within the grid boundaries and has not been visited yet
        return (x >= 0 && x < N && y >= 0 && y < M && !visited[x][y]);
    }

    // Recursive method to perform the depth-first search
    private boolean search(String[] Graph, int x, int y, int N, int M, boolean[][] visited, int index) {
        // Mark the current cell as visited
        visited[x][y] = true;

        // If we have found the entire target string, return true
        if (index == target.length() - 1) {
            return true;
        }

        // Try all possible directions
        for (int dir = 0; dir < 8; dir++) {
            int newX = x + dx[dir], newY = y + dy[dir];

            // If the next cell is safe and contains the next character in the target string, visit it
            if (isSafe(newX, newY, N, M, visited) && Graph[newX].charAt(newY) == target.charAt(index + 1)) {
                // If we can find the target string from here, return true
                if (search(Graph, newX, newY, N, M, visited, index + 1)) {
                    return true;
                }
            }
        }

        // If we couldn't find the target string from here, backtrack by marking the cell as unvisited
        visited[x][y] = false;
        return false;
    }

    // Main method to start the search
    public int solve(String[] Graph, int N, int M) {
        // Initialize the visited array
        boolean[][] visited = new boolean[N][M];

        // Start the search from every cell that contains the first character of the target string
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (Graph[i].charAt(j) == target.charAt(0) && search(Graph, i, j, N, M, visited, 0)) {
                    // If we can find the target string from here, return 1
                    return 1;
                }
            }
        }

        // If we couldn't find the target string anywhere in the grid, return 0
        return 0;
    }
}
